{"version":3,"sources":["utils.js","color.js","components/PlayNumber.js","components/StarsDisplay.js","components/PlayAgain.js","hooks/UseGameState.js","components/Game.js","components/App.js","serviceWorker.js","index.js"],"names":["utils","total","arr","reduce","acc","cur","range","min","max","Array","from","length","_","i","random","Math","floor","randomSumIn","sets","sums","j","len","candidateSet","concat","candidateSum","push","colors","available","used","wrong","candidate","PlayNumber","props","className","style","backgroundColor","status","onClick","onClickNumber","number","StarsDisplay","stars","map","id","key","PlayAgain","color","gameStatus","onClickPlayAgain","useGameState","useState","maxstars","setStars","availableNums","setAvailableNums","candidateNums","setCandidateNums","timelimit","secondsLeft","setSecondsLeft","totalScore","setTotalScore","useEffect","timerId","setTimeout","clearTimeout","setGameState","newCandidateNums","newAvailableNums","filter","n","includes","resetGame","Game","candidateAreWrong","maxWidth","sqrt","App","setMaxstars","setTimelimit","onChange","e","target","value","handleChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bd640ded.chunk.js","sourcesContent":["const utils = {\r\n  total: (arr) => arr.reduce((acc, cur) => acc + cur, 0),\r\n  range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\r\n  random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\r\n  randomSumIn: (arr, max) => {\r\n    const sets = [[]];\r\n    const sums = [];\r\n\r\n    for (let i = 0; i < arr.length; i++) {\r\n      for (let j = 0, len = sets.length; j < len; j++) {\r\n        const candidateSet = sets[j].concat(arr[i]);\r\n        const candidateSum = utils.total(candidateSet);\r\n        if (candidateSum <= max) {\r\n          sets.push(candidateSet);\r\n          sums.push(candidateSum);\r\n        }\r\n      }\r\n    }\r\n    return sums[utils.random(0, sums.length - 1)];\r\n  },\r\n};\r\n\r\nexport default utils;\r\n","const colors = {\r\n    available: 'lightgray',\r\n    used: 'lightgreen',\r\n    wrong: 'lightcoral',\r\n    candidate: 'deepskyblue'\r\n}\r\n\r\nexport default colors;","import React from \"react\";\r\nimport colors from \"../color\";\r\n\r\nconst PlayNumber = (props) => {\r\n  return (\r\n    <button\r\n      className=\"number\"\r\n      style={{ backgroundColor: colors[props.status] }}\r\n      onClick={() => props.onClickNumber(props.number, props.status)}\r\n    >\r\n      {props.number}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default PlayNumber;\r\n","import React from \"react\";\r\nimport utils from \"../utils\";\r\n\r\nconst StarsDisplay = (props) => {\r\n  return (\r\n    <>\r\n      {utils.range(1, props.stars).map((id) => (\r\n        <div key={id} className=\"star\" />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default StarsDisplay;\r\n","import React from \"react\";\r\nconst PlayAgain = (props) => {\r\n  return (\r\n    <div className=\"game-done\">\r\n      <div\r\n        className=\"message\"\r\n        style={{ color: props.gameStatus === \"lost\" ? \"red\" : \"green\" }}\r\n      >\r\n        {props.gameStatus === \"lost\" ? \"Game Over\" : \"Won\"}\r\n      </div>\r\n      <button className={'btn btn-primary'} onClick={props.onClickPlayAgain}>Play Again</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlayAgain;\r\n","import { useState, useEffect } from \"react\";\r\nimport utils from \"../utils\";\r\n\r\nconst useGameState = (props) => {\r\n  const [stars, setStars] = useState(utils.random(1, props.maxstars));\r\n  const [availableNums, setAvailableNums] = useState(utils.range(1, props.maxstars));\r\n  const [candidateNums, setCandidateNums] = useState([]);\r\n  const [secondsLeft, setSecondsLeft] = useState(props.timelimit);\r\n  const [totalScore, setTotalScore] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (secondsLeft > 0 && availableNums.length > 0) {\r\n      const timerId = setTimeout(() => {\r\n        setSecondsLeft(secondsLeft - 1);\r\n      }, 1000);\r\n      return () => clearTimeout(timerId);\r\n    }\r\n  }, [secondsLeft, availableNums.length]);\r\n\r\n  const setGameState = (newCandidateNums) => {\r\n    if (utils.total(newCandidateNums) !== stars) {\r\n      setCandidateNums(newCandidateNums);\r\n    } else {\r\n      const newAvailableNums = availableNums.filter(\r\n        (n) => !newCandidateNums.includes(n)\r\n      );\r\n      setStars(utils.randomSumIn(newAvailableNums, props.maxstars));\r\n      setAvailableNums(newAvailableNums);\r\n      setCandidateNums([]);\r\n    }\r\n  };\r\n\r\n  const resetGame = () => {\r\n    setStars(utils.random(1, props.maxstars));\r\n    setAvailableNums(utils.range(1, props.maxstars));\r\n    setCandidateNums([]);\r\n    setSecondsLeft(props.timelimit);\r\n  };\r\n\r\n  return {\r\n    stars,\r\n    availableNums,\r\n    candidateNums,\r\n    secondsLeft,\r\n    totalScore,\r\n    setTotalScore,\r\n    setGameState,\r\n    resetGame,\r\n  };\r\n};\r\n\r\nexport default useGameState;\r\n","import React, { useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport utils from \"../utils\";\r\nimport PlayNumber from \"./PlayNumber\";\r\nimport StarsDisplay from \"./StarsDisplay\";\r\nimport PlayAgain from \"./PlayAgain\";\r\nimport useGameState from \"../hooks/UseGameState\";\r\n\r\nfunction Game(props) {\r\n  const {\r\n    stars,\r\n    availableNums,\r\n    candidateNums,\r\n    secondsLeft,\r\n    totalScore,\r\n    setTotalScore,\r\n    setGameState,\r\n    resetGame,\r\n  } = useGameState(props);\r\n\r\n  const candidateAreWrong = utils.total(candidateNums) > stars;\r\n  const gameStatus =\r\n    availableNums.length === 0 ? \"won\" : secondsLeft === 0 ? \"lost\" : \"active\";\r\n\r\n  useEffect(() => {\r\n    if (gameStatus === \"won\") {\r\n      setTotalScore(totalScore + secondsLeft * 10 + 10);\r\n    }\r\n  }, [gameStatus]);\r\n\r\n  const setNumberStatus = (number) => {\r\n    if (!availableNums.includes(number)) return \"used\";\r\n    if (candidateNums.includes(number))\r\n      return candidateAreWrong ? \"wrong\" : \"candidate\";\r\n    return \"available\";\r\n  };\r\n\r\n  const onClickNumber = (number, status) => {\r\n    if (gameStatus !== \"active\" || status === \"used\") return;\r\n    const newCandidateNums =\r\n      status === \"available\"\r\n        ? candidateNums.concat(number)\r\n        : candidateNums.filter((n) => !candidateNums.includes(n));\r\n\r\n    setGameState(newCandidateNums);\r\n  };\r\n\r\n  return (\r\n    <div className=\"game\" style={{maxWidth: Math.floor(Math.sqrt(props.maxstars)) * 2 * 74 }}>\r\n      <div className=\"score\">Score: {totalScore}</div>\r\n      <div className=\"help\">\r\n        Pick one or more numbers that sum to the number of stars\r\n      </div>\r\n      <div className=\"body\">\r\n        <div className=\"left\">\r\n          {gameStatus !== \"active\" ? (\r\n            <PlayAgain onClickPlayAgain={resetGame} gameStatus={gameStatus} />\r\n          ) : (\r\n            <StarsDisplay stars={stars} />\r\n          )}\r\n        </div>\r\n        <div className=\"right\">\r\n          {utils.range(1, props.maxstars).map((id) => (\r\n            <PlayNumber\r\n              key={id}\r\n              number={id}\r\n              status={setNumberStatus(id)}\r\n              onClickNumber={onClickNumber}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div className=\"timer\">Time remaining: {secondsLeft}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n","import React, { useState } from \"react\";\nimport Game from \"./Game\";\n\nconst App = () => {\n  const [maxstars, setMaxstars] = useState(9);\n  const [timelimit, setTimelimit] = useState(20);\n\n  const handleChange = (e) => {\n    setMaxstars(e.target.value);\n    setTimelimit(Math.sqrt(e.target.value) * 10);\n  };\n\n  return (\n    <div\n      className=\"app\"\n      style={{ maxWidth: Math.floor(Math.sqrt(maxstars)) * 2 * 74 }}\n    >\n      <fieldset>\n        <label>Select Difficulty Level:</label>\n        <select\n          className=\"mt-4 col-md-4 col-offset-8\"\n          onChange={(e) => handleChange(e)}\n        >\n          <option value=\"9\">Easy</option>\n          <option value=\"16\">Moderate</option>\n          <option value=\"25\">Hard</option>\n          <option value=\"36\">Very Hard</option>\n        </select>\n      </fieldset>\n      \n      <Game key={maxstars} maxstars={maxstars} timelimit={timelimit} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}